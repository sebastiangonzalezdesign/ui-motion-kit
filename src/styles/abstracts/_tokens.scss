@use 'sass:map';
@use 'colors' as colors;
@use '../functions/colors' as color-fn;

// PRO: Design System Tokens
// ==============================================

// Semantic Color System CSS Custom Properties
// These provide runtime theme switching and consistent naming
:root {
  // Background Colors
  --background-primary: #{map.get(colors.$gray, 50)};
  --background-secondary: #{map.get(colors.$gray, 100)};
  --background-tertiary: #{map.get(colors.$gray, 200)};
  --background-inverse: #{map.get(colors.$gray, 900)};

  // Text Colors
  --text-primary: #{map.get(colors.$gray, 900)};
  --text-secondary: #{map.get(colors.$gray, 700)};
  --text-tertiary: #{map.get(colors.$gray, 500)};
  --text-inverse: #{map.get(colors.$gray, 50)};
  --text-disabled: #{map.get(colors.$gray, 400)};

  // Border Colors
  --border-light: #{map.get(colors.$gray, 200)};
  --border-medium: #{map.get(colors.$gray, 300)};
  --border-dark: #{map.get(colors.$gray, 400)};
  --border-focus: #{map.get(colors.$blue, 500)};

  // Accent Colors
  --accent-primary: #{map.get(colors.$blue, 600)};
  --accent-primary-hover: #{map.get(colors.$blue, 700)};
  --accent-primary-light: #{map.get(colors.$blue, 50)};
  --accent-secondary: #{map.get(colors.$purple, 600)};
  --accent-secondary-hover: #{map.get(colors.$purple, 700)};

  // Feedback Colors
  --feedback-success: #{map.get(colors.$green, 600)};
  --feedback-success-light: #{map.get(colors.$green, 50)};
  --feedback-warning: #{map.get(colors.$yellow, 600)};
  --feedback-warning-light: #{map.get(colors.$yellow, 50)};
  --feedback-error: #{map.get(colors.$red, 600)};
  --feedback-error-light: #{map.get(colors.$red, 50)};
  --feedback-info: #{map.get(colors.$blue, 600)};
  --feedback-info-light: #{map.get(colors.$blue, 50)};
}

// Dark theme variant
[data-theme='dark'] {
  // Background Colors
  --background-primary: #{map.get(colors.$gray, 900)};
  --background-secondary: #{map.get(colors.$gray, 800)};
  --background-tertiary: #{map.get(colors.$gray, 700)};
  --background-inverse: #{map.get(colors.$gray, 50)};

  // Text Colors
  --text-primary: #{map.get(colors.$gray, 50)};
  --text-secondary: #{map.get(colors.$gray, 300)};
  --text-tertiary: #{map.get(colors.$gray, 400)};
  --text-inverse: #{map.get(colors.$gray, 900)};
  --text-disabled: #{map.get(colors.$gray, 500)};

  // Border Colors
  --border-light: #{map.get(colors.$gray, 700)};
  --border-medium: #{map.get(colors.$gray, 600)};
  --border-dark: #{map.get(colors.$gray, 500)};
  --border-focus: #{map.get(colors.$blue, 400)};

  // Accent Colors (slightly lighter for dark theme)
  --accent-primary: #{map.get(colors.$blue, 500)};
  --accent-primary-hover: #{map.get(colors.$blue, 400)};
  --accent-primary-light: #{map.get(colors.$blue, 900)};
  --accent-secondary: #{map.get(colors.$purple, 500)};
  --accent-secondary-hover: #{map.get(colors.$purple, 400)};

  // Feedback Colors (adjusted for dark theme)
  --feedback-success: #{map.get(colors.$green, 500)};
  --feedback-success-light: #{map.get(colors.$green, 900)};
  --feedback-warning: #{map.get(colors.$yellow, 500)};
  --feedback-warning-light: #{map.get(colors.$yellow, 900)};
  --feedback-error: #{map.get(colors.$red, 500)};
  --feedback-error-light: #{map.get(colors.$red, 900)};
  --feedback-info: #{map.get(colors.$blue, 500)};
  --feedback-info-light: #{map.get(colors.$blue, 900)};
}

// Export SCSS variable equivalents for all semantic tokens
$background-primary: var(--background-primary);
$background-secondary: var(--background-secondary);
$background-tertiary: var(--background-tertiary);
$background-inverse: var(--background-inverse);

$text-primary: var(--text-primary);
$text-secondary: var(--text-secondary);
$text-tertiary: var(--text-tertiary);
$text-inverse: var(--text-inverse);
$text-disabled: var(--text-disabled);

$border-light: var(--border-light);
$border-medium: var(--border-medium);
$border-dark: var(--border-dark);
$border-focus: var(--border-focus);

$accent-primary: var(--accent-primary);
$accent-primary-hover: var(--accent-primary-hover);
$accent-primary-light: var(--accent-primary-light);
$accent-secondary: var(--accent-secondary);
$accent-secondary-hover: var(--accent-secondary-hover);

$success: var(--feedback-success);
$success-light: var(--feedback-success-light);
$warning: var(--feedback-warning);
$warning-light: var(--feedback-warning-light);
$error: var(--feedback-error);
$error-light: var(--feedback-error-light);
$info: var(--feedback-info);
$info-light: var(--feedback-info-light);

// Legacy compatibility tokens
$white: var(--background-primary);
$black: var(--text-primary);
$gray-light: var(--border-light);
$gray-dark: var(--border-dark);

// Logo color token (automatically switches with theme)
$logo-color: var(--text-primary);

// Brand colors from semantic system
$primary: var(--accent-primary);
$secondary: var(--accent-secondary);
$danger: var(--feedback-error);

// Brand hover state
$brand-hover: var(--accent-primary-hover);

// Individual color shade variables for common use
$blue-50: map.get(colors.$blue, 50);
$blue-100: map.get(colors.$blue, 100);
$blue-200: map.get(colors.$blue, 200);
$blue-300: map.get(colors.$blue, 300);
$blue-400: map.get(colors.$blue, 400);
$blue-500: map.get(colors.$blue, 500);
$blue-600: map.get(colors.$blue, 600);
$blue-700: map.get(colors.$blue, 700);
$blue-800: map.get(colors.$blue, 800);
$blue-900: map.get(colors.$blue, 900);

$gray-50: map.get(colors.$gray, 50);
$gray-100: map.get(colors.$gray, 100);
$gray-200: map.get(colors.$gray, 200);
$gray-300: map.get(colors.$gray, 300);
$gray-400: map.get(colors.$gray, 400);
$gray-500: map.get(colors.$gray, 500);
$gray-600: map.get(colors.$gray, 600);
$gray-700: map.get(colors.$gray, 700);
$gray-800: map.get(colors.$gray, 800);
$gray-900: map.get(colors.$gray, 900);

$green-50: map.get(colors.$green, 50);
$green-100: map.get(colors.$green, 100);
$green-200: map.get(colors.$green, 200);
$green-300: map.get(colors.$green, 300);
$green-400: map.get(colors.$green, 400);
$green-500: map.get(colors.$green, 500);
$green-600: map.get(colors.$green, 600);
$green-700: map.get(colors.$green, 700);
$green-800: map.get(colors.$green, 800);
$green-900: map.get(colors.$green, 900);

$red-50: map.get(colors.$red, 50);
$red-100: map.get(colors.$red, 100);
$red-200: map.get(colors.$red, 200);
$red-300: map.get(colors.$red, 300);
$red-400: map.get(colors.$red, 400);
$red-500: map.get(colors.$red, 500);
$red-600: map.get(colors.$red, 600);
$red-700: map.get(colors.$red, 700);
$red-800: map.get(colors.$red, 800);
$red-900: map.get(colors.$red, 900);

$yellow-50: map.get(colors.$yellow, 50);
$yellow-100: map.get(colors.$yellow, 100);
$yellow-200: map.get(colors.$yellow, 200);
$yellow-300: map.get(colors.$yellow, 300);
$yellow-400: map.get(colors.$yellow, 400);
$yellow-500: map.get(colors.$yellow, 500);
$yellow-600: map.get(colors.$yellow, 600);
$yellow-700: map.get(colors.$yellow, 700);
$yellow-800: map.get(colors.$yellow, 800);
$yellow-900: map.get(colors.$yellow, 900);

$orange-50: map.get(colors.$orange, 50);
$orange-100: map.get(colors.$orange, 100);
$orange-200: map.get(colors.$orange, 200);
$orange-300: map.get(colors.$orange, 300);
$orange-400: map.get(colors.$orange, 400);
$orange-500: map.get(colors.$orange, 500);
$orange-600: map.get(colors.$orange, 600);
$orange-700: map.get(colors.$orange, 700);
$orange-800: map.get(colors.$orange, 800);
$orange-900: map.get(colors.$orange, 900);

$purple-50: map.get(colors.$purple, 50);
$purple-100: map.get(colors.$purple, 100);
$purple-200: map.get(colors.$purple, 200);
$purple-300: map.get(colors.$purple, 300);
$purple-400: map.get(colors.$purple, 400);
$purple-500: map.get(colors.$purple, 500);
$purple-600: map.get(colors.$purple, 600);
$purple-700: map.get(colors.$purple, 700);
$purple-800: map.get(colors.$purple, 800);
$purple-900: map.get(colors.$purple, 900);

// Enhanced surface tokens for complex layering
$surface-elevated: rgba(0, 0, 0, 0.02); // Subtle surface elevation for light mode
$surface-elevated-dark: rgba(255, 255, 255, 0.05); // Subtle surface elevation for dark mode

// Brand background tokens with proper opacity
$brand-bg-soft: rgba(37, 99, 235, 0.08); // Soft blue background using blue-600 base
$brand-bg-light: rgba(37, 99, 235, 0.12); // Light blue background
$brand-bg-medium: rgba(37, 99, 235, 0.18); // Medium blue background

// Gradient tokens
$brand-bg-gradient: linear-gradient(
  135deg,
  #{map.get(colors.$blue, 50)} 0%,
  #{map.get(colors.$blue, 100)} 100%
);
$brand-bg-gradient-dark: linear-gradient(
  135deg,
  #{map.get(colors.$gray, 900)} 0%,
  #{map.get(colors.$gray, 800)} 50%,
  #{map.get(colors.$gray, 700)} 100%
);

// Typography tokens
$font-family-ui:
  'Inter',
  -apple-system,
  BlinkMacSystemFont,
  'Segoe UI',
  sans-serif;
$font-family-code: 'JetBrains Mono', 'SF Mono', Monaco, 'Cascadia Code', monospace;

$font-size-xs: 0.75rem; // 12px
$font-size-sm: 0.875rem; // 14px
$font-size-base: 1rem; // 16px
$font-size-lg: 1.125rem; // 18px
$font-size-xl: 1.25rem; // 20px
$font-size-2xl: 1.5rem; // 24px
$font-size-3xl: 2rem; // 32px

$font-weight-normal: 400;
$font-weight-medium: 500;
$font-weight-semibold: 600;
$font-weight-bold: 700;

// Spacing tokens
$space-xs: 0.25rem; // 4px
$space-sm: 0.5rem; // 8px
$space-md: 1rem; // 16px
$space-lg: 1.5rem; // 24px
$space-xl: 2rem; // 32px
$space-2xl: 3rem; // 48px

// Border radius tokens
$radius-none: 0;
$radius-sm: 0.25rem; // 4px
$radius-md: 0.5rem; // 8px
$radius-lg: 1rem; // 16px
$radius-xl: 1.5rem; // 24px
$radius-full: 9999px;

// Surface tokens for complex layering
$surface-base: $background-primary;
$surface-raised: $background-secondary;
$surface-overlay: rgba(0, 0, 0, 0.8); // Modal backdrop
$surface-sheet: rgba(255, 255, 255, 0.95); // Drawer/sheet background

// State tokens (using new semantic system)
$state-success: $success;
$state-warning: $warning;
$state-error: $error;
$state-info: $info;

// Interactive tokens
$interactive-primary: $accent-primary;
$interactive-secondary: $text-secondary;
$interactive-accent: map.get(colors.$purple, 500); // Purple accent
$interactive-muted: $text-disabled;

// Focus tokens
$focus-ring: rgba(37, 99, 235, 0.3); // Blue-600 with opacity
$focus-ring-dark: rgba(96, 165, 250, 0.4); // Blue-400 with opacity
$focus-ring-offset: 2px;
