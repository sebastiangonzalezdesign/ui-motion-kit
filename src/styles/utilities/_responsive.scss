@use '../abstracts/breakpoints' as *;
@use '../abstracts/spacing' as *;
@use 'sass:string';

// PRO: Responsive Utilities
// ==============================================

// String replacement function for class names
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

// Responsive visibility utilities
.hidden {
  display: none !important;
}

@each $breakpoint, $value in $breakpoints {
  .hidden-#{$breakpoint} {
    @include respond($breakpoint) {
      display: none !important;
    }
  }

  .visible-#{$breakpoint} {
    display: none !important;

    @include respond($breakpoint) {
      display: block !important;
    }
  }
}

// Responsive spacing utilities
@each $key, $value in $spacing-scale {
  // Convert decimal keys to valid CSS class names
  $class-key: $key;
  @if string.index($key, '.') {
    $class-key: str-replace($key, '.', '_');
  }

  // Margin utilities
  .m-#{$class-key} {
    margin: $value !important;
  }
  .mt-#{$class-key} {
    margin-top: $value !important;
  }
  .mr-#{$class-key} {
    margin-right: $value !important;
  }
  .mb-#{$class-key} {
    margin-bottom: $value !important;
  }
  .ml-#{$class-key} {
    margin-left: $value !important;
  }
  .mx-#{$class-key} {
    margin-left: $value !important;
    margin-right: $value !important;
  }
  .my-#{$class-key} {
    margin-top: $value !important;
    margin-bottom: $value !important;
  }

  // Padding utilities
  .p-#{$class-key} {
    padding: $value !important;
  }
  .pt-#{$class-key} {
    padding-top: $value !important;
  }
  .pr-#{$class-key} {
    padding-right: $value !important;
  }
  .pb-#{$class-key} {
    padding-bottom: $value !important;
  }
  .pl-#{$class-key} {
    padding-left: $value !important;
  }
  .px-#{$class-key} {
    padding-left: $value !important;
    padding-right: $value !important;
  }
  .py-#{$class-key} {
    padding-top: $value !important;
    padding-bottom: $value !important;
  }
}

// Responsive text alignment
.text-left {
  text-align: left !important;
}
.text-center {
  text-align: center !important;
}
.text-right {
  text-align: right !important;
}

@each $breakpoint, $value in $breakpoints {
  .text-#{$breakpoint}-left {
    @include respond($breakpoint) {
      text-align: left !important;
    }
  }

  .text-#{$breakpoint}-center {
    @include respond($breakpoint) {
      text-align: center !important;
    }
  }

  .text-#{$breakpoint}-right {
    @include respond($breakpoint) {
      text-align: right !important;
    }
  }
}

// Responsive flexbox utilities
.flex {
  display: flex !important;
}
.inline-flex {
  display: inline-flex !important;
}
.flex-col {
  flex-direction: column !important;
}
.flex-row {
  flex-direction: row !important;
}
.flex-wrap {
  flex-wrap: wrap !important;
}
.flex-nowrap {
  flex-wrap: nowrap !important;
}

.justify-start {
  justify-content: flex-start !important;
}
.justify-center {
  justify-content: center !important;
}
.justify-end {
  justify-content: flex-end !important;
}
.justify-between {
  justify-content: space-between !important;
}
.justify-around {
  justify-content: space-around !important;
}

.items-start {
  align-items: flex-start !important;
}
.items-center {
  align-items: center !important;
}
.items-end {
  align-items: flex-end !important;
}
.items-stretch {
  align-items: stretch !important;
}

// Responsive grid utilities
.grid {
  display: grid !important;
}
.grid-cols-1 {
  grid-template-columns: repeat(1, minmax(0, 1fr)) !important;
}
.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
}
.grid-cols-3 {
  grid-template-columns: repeat(3, minmax(0, 1fr)) !important;
}
.grid-cols-4 {
  grid-template-columns: repeat(4, minmax(0, 1fr)) !important;
}
.grid-cols-6 {
  grid-template-columns: repeat(6, minmax(0, 1fr)) !important;
}
.grid-cols-12 {
  grid-template-columns: repeat(12, minmax(0, 1fr)) !important;
}

.gap-1 {
  gap: space('1') !important;
}
.gap-2 {
  gap: space('2') !important;
}
.gap-3 {
  gap: space('3') !important;
}
.gap-4 {
  gap: space('4') !important;
}
.gap-6 {
  gap: space('6') !important;
}
.gap-8 {
  gap: space('8') !important;
}
