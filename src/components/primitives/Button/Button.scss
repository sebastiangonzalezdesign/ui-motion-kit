@use '../../../styles/abstracts/colors' as *;
@use '../../../styles/abstracts/tokens' as *;
@use '../../../styles/abstracts/motion' as *;
@use '../../../styles/abstracts/breakpoints' as *;

// Define consistent sizing tokens
:root {
  --button-border-width: 2px;
  --button-border-radius: 0.5rem;
}

.button {
  // Consistent base styles
  border: var(--button-border-width) solid transparent;
  border-radius: var(--button-border-radius);
  background-color: $primary;
  color: $background-primary;
  font-size: 1rem;
  cursor: pointer;
  transition: all $motion-normal;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  box-sizing: border-box;

  &:hover {
    background-color: $brand-hover;
  }

  // Size variants with consistent border compensation
  &.button-sm {
    padding: calc(0.5rem - var(--button-border-width)) calc(1rem - var(--button-border-width));
    font-size: 0.875rem;

    @include respond('sm') {
      padding: calc(0.5rem - var(--button-border-width)) calc(1rem - var(--button-border-width));
      font-size: 0.875rem;
    }

    @include respond('md') {
      padding: calc(0.5rem - var(--button-border-width)) calc(1rem - var(--button-border-width));
    }
  }

  &.button-md {
    padding: calc(0.75rem - var(--button-border-width)) calc(1.5rem - var(--button-border-width));

    @include respond('sm') {
      padding: calc(0.875rem - var(--button-border-width))
        calc(1.75rem - var(--button-border-width));
      font-size: 1.0625rem;
    }

    @include respond('md') {
      padding: calc(1rem - var(--button-border-width)) calc(2rem - var(--button-border-width));
    }
  }

  &.button-lg {
    padding: calc(1rem - var(--button-border-width)) calc(2rem - var(--button-border-width));
    font-size: 1.125rem;

    @include respond('sm') {
      padding: calc(1.125rem - var(--button-border-width))
        calc(2.25rem - var(--button-border-width));
      font-size: 1.25rem;
    }

    @include respond('md') {
      padding: calc(1.25rem - var(--button-border-width)) calc(2.5rem - var(--button-border-width));
      font-size: 1.375rem;
    }
  }

  // Variant styles - all use consistent border approach
  &--outline {
    background-color: transparent;
    color: $primary;
    border-color: $primary; // Same border width, different color

    &:hover {
      background-color: $primary;
      color: $background-primary;
      border-color: $primary; // Maintain border on hover
    }

    [data-theme='dark'] & {
      color: $primary;
      border-color: $primary;

      &:hover {
        background-color: $primary;
        color: $background-primary;
        border-color: $primary;
      }
    }
  }

  &--ghost {
    background-color: transparent;
    color: $primary;
    border-color: transparent; // Consistent border width, transparent

    &:hover {
      background-color: rgba($primary, 0.1);
      border-color: transparent; // Keep transparent border
    }

    [data-theme='dark'] & {
      color: $primary;

      &:hover {
        background-color: rgba($primary, 0.2);
        border-color: transparent;
      }
    }
  }

  &--danger {
    background-color: $background-danger;
    color: $background-primary;
    border-color: transparent; // Consistent border width, transparent

    &:hover {
      background-color: $background-danger-hover;
      border-color: transparent;
    }
  }

  // Icon and content layout
  &__icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 1.25em;
    height: 1.25em;
    flex-shrink: 0;

    svg {
      width: 100%;
      height: 100%;
    }

    &--left {
      order: -1;
    }

    &--right {
      order: 1;
    }
  }

  &__content {
    display: flex;
    align-items: center;
    white-space: nowrap;
  }
}

@media (prefers-reduced-motion: reduce) {
  .button {
    transition: none;
  }
}
